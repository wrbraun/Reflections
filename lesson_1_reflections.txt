the exercise demonstrates the need for version control; i.e., for an archive of code reflecting a particular state of the project.
FC was useful because comparing two files with thousands of lines of code is no fun.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
First, it helps to find errrors, as demonstrated above. Second, when a program is expanded with new functions we may want to go back to an earlier, simpler version and enhance it in a different direction.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?
+ it documents a defined state
- it requires discipline

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
For sotware, where multiple files represent the state of the project, it is the only way. If I work woth documents this close link does not usually exist.

How can you use the commands git log and git diff to view the history of files?
with log i can see the comments for the commits, which should tell me what has changed. With diff I can see what the concrete changes were.

How might using version control make you more confident to make changes that could break something?
I can always go back

Now that you have your workspace set up, what do you want to try using Git for?
I want to return to the Android course and load that program in the right version.